#создай тут фоторедактор Easy Editor!
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'py.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets, QtCore
from PyQt5.QtWidgets import QFileDialog
import os
from PIL import Image
from PIL import ImageFilter 
from PIL.ImageFilter import (
    BLUR, CONTOUR, DETAIL, EDGE_ENHANCE, EDGE_ENHANCE_MORE,
    EMBOSS, FIND_EDGES, SMOOTH, SMOOTH_MORE,SHARPEN, GaussianBlur, UnsharpMask
)

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1029, 693)
        Form.setStyleSheet("background-color: LightGrey; border-radius:10px;")
        self.verticalLayoutWidget = QtWidgets.QWidget(Form)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(9, 9, 221, 641))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.btn_dir = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.btn_dir.setStyleSheet("border-radius: 10px; background-color: white;font-size: 20px")
        self.btn_dir.setObjectName("btn_dir")
        self.verticalLayout.addWidget(self.btn_dir)
        self.lw_files = QtWidgets.QListWidget(self.verticalLayoutWidget)
        self.lw_files.setStyleSheet("border-radius: 10px;")
        self.lw_files.setObjectName("lw_files")
        self.verticalLayout.addWidget(self.lw_files)
        self.lb_image = QtWidgets.QLabel(Form)
        self.lb_image.setGeometry(QtCore.QRect(240, 10, 751, 561))
        self.lb_image.setObjectName("lb_image")
        self.btn_left = QtWidgets.QPushButton(Form)
        self.btn_left.setGeometry(QtCore.QRect(250, 600, 151, 61))
        self.btn_left.setStyleSheet("border-radius:10px; background-color: white;\n"
" font-size:20px; box-shadow: 10px 20px 20px 20px #aaaaaa01;")
        self.btn_left.setObjectName("btn_left")
        self.btn_right = QtWidgets.QPushButton(Form)
        self.btn_right.setGeometry(QtCore.QRect(410, 600, 141, 61))
        self.btn_right.setStyleSheet("border-radius:10px; background-color: white;\n"
" font-size:20px; box-shadow: 10px 20px 20px 20px #aaaaaa01;")
        self.btn_right.setObjectName("btn_right")
        self.bnt_flip = QtWidgets.QPushButton(Form)
        self.bnt_flip.setGeometry(QtCore.QRect(570, 600, 141, 61))
        self.bnt_flip.setStyleSheet("border-radius:10px; background-color: white;\n"
" font-size:20px; box-shadow: 10px 20px 20px 20px #aaaaaa01;")
        self.bnt_flip.setObjectName("bnt_flip")
        self.btn_sharp = QtWidgets.QPushButton(Form)
        self.btn_sharp.setGeometry(QtCore.QRect(730, 600, 131, 61))
        self.btn_sharp.setStyleSheet("border-radius:10px; background-color: white;\n"
" font-size:20px; box-shadow: 10px 20px 20px 20px #aaaaaa01;")
        self.btn_sharp.setObjectName("btn_sharp")
        self.btn_bw = QtWidgets.QPushButton(Form)
        self.btn_bw.setGeometry(QtCore.QRect(880, 600, 141, 61))
        self.btn_bw.setStyleSheet("border-radius:10px; background-color: white;\n"
" font-size:20px; box-shadow: 10px 20px 20px 20px #aaaaaa01;")
        self.btn_bw.setObjectName("btn_bw")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        
        self.btn_dir.setText(_translate("Form", "Выбрать файл.."))
        self.lb_image.setText(_translate("Form", "Картинка"))
        self.btn_left.setText(_translate("Form", "Лево"))
        self.btn_right.setText(_translate("Form", "Право"))
        self.bnt_flip.setText(_translate("Form", "Зеркало"))
        self.btn_sharp.setText(_translate("Form", "Резкость"))
        self.btn_bw.setText(_translate("Form", "ЧБ"))
if __name__ == "__main__":
    import sys 
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_Form()
    ui.setupUi(MainWindow)
    workdir = ''
    def filter(files, extensions):
        result = []
        for filename in files:
            for ext in extensions:
                if filename.endswith(ext):
                    result.append(filename)
        return result
    def chooseWorkdir():
        global workdir
        workdir = QFileDialog.getExistingDirectory()
    def showFilenamesList():
        extensions = ['.jpg','.jpeg','.png','.bmp']
        chooseWorkdir()
        filenames = filter(os.listdir(workdir),extensions)
        ui.lw_files.clear()
        for filename in filenames:
            ui.lw_files.addItem(filename)


    class ImageProcessor():
        def __init__(self):
            self.image = None
            self.dir = None
            self.filename = None
            self.save_dir = "Modified/"

        def loadImage(self, filename):
            ''' при загрузке запоминаем путь и имя файла '''
            
            self.filename = filename
            fullname = os.path.join(workdir, filename)
            self.image = Image.open(fullname)

        def showImage(self, path):
            ui.lb_image.hide()
            pixmapimage = QtGui.QPixmap(path)
            w, h = ui.lb_image.width(), ui.lb_image.height()
            pixmapimage = pixmapimage.scaled(w, h, QtCore.Qt.KeepAspectRatio)
            ui.lb_image.setPixmap(pixmapimage)
            ui.lb_image.show()
        def saveImage(self):
            path = os.path.join(workdir, self.save_dir)
            if not(os.path.exists(path) or os.path.isdir(path)):
                os.mkdir(path)
            fullname = os.path.join(path, self.filename)
            self.image.save(fullname)
        def do_bw(self):
            self.image = self.image.convert("L")
            self.saveImage()
            image_path= os.path.join(workdir, self.save_dir, self.filename)
            self.showImage(image_path)
        def do_left(self):
            self.image = self.image.transpose(Image.ROTATE_90)
            self.saveImage()
            image_path= os.path.join(workdir, self.save_dir, self.filename)
            self.showImage(image_path)
        def do_right(self):
            self.image = self.image.transpose(Image.ROTATE_270)
            self.saveImage()
            image_path= os.path.join(workdir, self.save_dir, self.filename)
            self.showImage(image_path)
        def do_flip(self):
            self.image = self.image.transpose(Image.FLIP_LEFT_RIGHT)
            self.saveImage()
            image_path= os.path.join(workdir, self.save_dir, self.filename)
            self.showImage(image_path)
        def do_sharpen(self):
            self.image = self.image.filter(SHARPEN)
            self.saveImage()
            image_path= os.path.join(workdir, self.save_dir, self.filename)
            self.showImage(image_path)
        


    def showChosenImage():
        if ui.lw_files.currentRow() >= 0:
            filename = ui.lw_files.currentItem().text()
            workimage.loadImage(filename)
            image_path = os.path.join(workdir, workimage.filename)
            workimage.showImage(image_path)
    workimage = ImageProcessor()

    

    ui.btn_dir.clicked.connect(showFilenamesList)
    ui.bnt_flip.clicked.connect(workimage.do_flip)
    ui.btn_left.clicked.connect(workimage.do_left)
    ui.btn_right.clicked.connect(workimage.do_right)
    ui.btn_sharp.clicked.connect(workimage.do_sharpen)
    ui.btn_bw.clicked.connect(workimage.do_bw)
    ui.lw_files.currentRowChanged.connect(showChosenImage)

        


    
    MainWindow.show()
        
    sys.exit(app.exec_()) 
